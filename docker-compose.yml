services:
  postgres:
    image: postgres:15
    container_name: srta-postgres
    environment:
      POSTGRES_USER: ${PG_USER:-srta}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-srta_pw}
      POSTGRES_DB: ${PG_DB:-srta}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-srta} -d ${PG_DB:-srta}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: srta-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20

 
  localstack:
    image: localstack/localstack:latest
    container_name: srta-localstack
    profiles: ["s3"]
    environment:
      - SERVICES=s3
      - DEBUG=0
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    ports:
      - "4566:4566" # edge
    volumes:
      - "localstack:/var/lib/localstack"
    healthcheck:
      test: ["CMD", "awslocal", "s3", "ls"]
      interval: 10s
      timeout: 5s
      retries: 30

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile.api
    container_name: srta-api
    environment:
      # SQLAlchemy + psycopg (v3) driver; use postgres service name
      SRTA_DB_URI: ${SRTA_DB_URI:-postgresql+psycopg://srta:srta_pw@postgres:5432/srta}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      # S3
      S3_BUCKET: ${S3_BUCKET:-srta-demo-bucket-fl}
      S3_PREFIX: ${S3_PREFIX:-exports/trades}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      # If using LocalStack profile, the endpoint is the service name
      AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL:-}
      # CORS already allows http://localhost:3000 in your app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"

  web:
    build:
      context: .
      dockerfile: frontend/Dockerfile.web
      args:
        # Browser calls the host port 8000, not docker network
        NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE:-http://localhost:8000/api/v1}
    container_name: srta-web
    environment:
      # Also keep at runtime for any server-side rendering that reads it
      NEXT_PUBLIC_API_BASE: ${NEXT_PUBLIC_API_BASE:-http://localhost:8000/api/v1}
      NODE_ENV: production
    depends_on:
      - api
    ports:
      - "3000:3000"

volumes:
  pgdata:
  localstack:
